{"remainingRequest":"/Users/fabiundrods/Documents/Programmierung/Vue/Projekte/rechner/node_modules/babel-loader/lib/index.js!/Users/fabiundrods/Documents/Programmierung/Vue/Projekte/rechner/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fabiundrods/Documents/Programmierung/Vue/Projekte/rechner/src/components/Calculator.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fabiundrods/Documents/Programmierung/Vue/Projekte/rechner/src/components/Calculator.vue","mtime":1536165641000},{"path":"/Users/fabiundrods/Documents/Programmierung/Vue/Projekte/rechner/node_modules/cache-loader/dist/cjs.js","mtime":1536154464000},{"path":"/Users/fabiundrods/Documents/Programmierung/Vue/Projekte/rechner/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/fabiundrods/Documents/Programmierung/Vue/Projekte/rechner/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      previous: null,\n      current: '',\n      operator: null,\n      operatorClicked: false\n    };\n  },\n  methods: {\n    append: function append(number) {\n      if (this.operatorClicked) {\n        this.current = '';\n        this.operatorClicked = false;\n      }\n\n      this.current = \"\".concat(this.current).concat(number);\n    },\n    clear: function clear() {\n      this.current = '';\n    },\n    sign: function sign() {\n      this.current = this.current.charAt(0) === '-' ? this.current.slice(1) : \"-\".concat(this.current);\n    },\n    dot: function dot() {\n      if (this.current.indexOf('.') === -1) {\n        this.append('.');\n      }\n    },\n\n    /**\n     * This function stores the previous value and set\n     * the operatorClicked as true in order to avoid\n     * the append function\n     */\n    setPrevious: function setPrevious() {\n      if (this.previous !== null) {\n        this.equal();\n      }\n\n      this.previous = this.current;\n      this.operatorClicked = true;\n    },\n\n    /**\n     * This function handles all the operations\n     */\n    makeOperation: function makeOperation(operation) {\n      switch (operation) {\n        case 'division':\n          this.operator = function (a, b) {\n            return a / b;\n          };\n\n          this.setPrevious();\n          break;\n\n        case 'multiply':\n          this.operator = function (a, b) {\n            return a * b;\n          };\n\n          this.setPrevious();\n          break;\n\n        case 'minus':\n          this.operator = function (a, b) {\n            return a - b;\n          };\n\n          this.setPrevious();\n          break;\n\n        case 'plus':\n          this.operator = function (a, b) {\n            return a + b;\n          };\n\n          this.setPrevious();\n          break;\n\n        default:\n          break;\n      }\n    },\n    percentage: function percentage() {\n      this.current = \"\".concat(parseFloat(this.current) / 100);\n    },\n    equal: function equal() {\n      this.current = \"\".concat(this.operator(parseFloat(this.previous), parseFloat(this.current)));\n      this.previous = null;\n    }\n  }\n};",{"version":3,"sources":["Calculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,gBAAA,IADA;AAEA,eAAA,EAFA;AAGA,gBAAA,IAHA;AAIA,uBAAA;AAJA,KAAA;AAMA,GARA;AASA,WAAA;AACA,UADA,kBACA,MADA,EACA;AACA,UAAA,KAAA,eAAA,EAAA;AACA,aAAA,OAAA,GAAA,EAAA;AACA,aAAA,eAAA,GAAA,KAAA;AACA;;AACA,WAAA,OAAA,aAAA,KAAA,OAAA,SAAA,MAAA;AACA,KAPA;AAQA,SARA,mBAQA;AACA,WAAA,OAAA,GAAA,EAAA;AACA,KAVA;AAWA,QAXA,kBAWA;AACA,WAAA,OAAA,GAAA,KAAA,OAAA,CAAA,MAAA,CAAA,CAAA,MAAA,GAAA,GACA,KAAA,OAAA,CAAA,KAAA,CAAA,CAAA,CADA,cACA,KAAA,OADA,CAAA;AAEA,KAdA;AAeA,OAfA,iBAeA;AACA,UAAA,KAAA,OAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,CAAA,EAAA;AACA,aAAA,MAAA,CAAA,GAAA;AACA;AACA,KAnBA;;AAoBA;;;;;AAKA,eAzBA,yBAyBA;AACA,UAAA,KAAA,QAAA,KAAA,IAAA,EAAA;AACA,aAAA,KAAA;AACA;;AACA,WAAA,QAAA,GAAA,KAAA,OAAA;AACA,WAAA,eAAA,GAAA,IAAA;AACA,KA/BA;;AAgCA;;;AAGA,iBAnCA,yBAmCA,SAnCA,EAmCA;AACA,cAAA,SAAA;AACA,aAAA,UAAA;AACA,eAAA,QAAA,GAAA,UAAA,CAAA,EAAA,CAAA;AAAA,mBAAA,IAAA,CAAA;AAAA,WAAA;;AACA,eAAA,WAAA;AACA;;AAEA,aAAA,UAAA;AACA,eAAA,QAAA,GAAA,UAAA,CAAA,EAAA,CAAA;AAAA,mBAAA,IAAA,CAAA;AAAA,WAAA;;AACA,eAAA,WAAA;AACA;;AAEA,aAAA,OAAA;AACA,eAAA,QAAA,GAAA,UAAA,CAAA,EAAA,CAAA;AAAA,mBAAA,IAAA,CAAA;AAAA,WAAA;;AACA,eAAA,WAAA;AACA;;AAEA,aAAA,MAAA;AACA,eAAA,QAAA,GAAA,UAAA,CAAA,EAAA,CAAA;AAAA,mBAAA,IAAA,CAAA;AAAA,WAAA;;AACA,eAAA,WAAA;AACA;;AAEA;AACA;AAtBA;AAwBA,KA5DA;AA6DA,cA7DA,wBA6DA;AACA,WAAA,OAAA,aAAA,WAAA,KAAA,OAAA,IAAA,GAAA;AACA,KA/DA;AAgEA,SAhEA,mBAgEA;AACA,WAAA,OAAA,aAAA,KAAA,QAAA,CACA,WAAA,KAAA,QAAA,CADA,EAEA,WAAA,KAAA,OAAA,CAFA,CAAA;AAIA,WAAA,QAAA,GAAA,IAAA;AACA;AAtEA;AATA,CAAA","sourcesContent":["<template>\n  <div class=\"calculator\">\n    <div class=\"display\">{{ current || '0' }}</div>\n    <div @click=\"clear\" class=\"btn\">C</div>\n    <div @click=\"sign\" class=\"btn\">+/-</div>\n    <div @click=\"percentage\" class=\"btn\">%</div>\n    <div @click=\"makeOperation('division')\"\n      class=\"btn operator\"\n      :id=\"{clicked: operatorClicked}\">/</div>\n    <div @click=\"append('7')\" class=\"btn\">7</div>\n    <div @click=\"append('8')\" class=\"btn\">8</div>\n    <div @click=\"append('9')\" class=\"btn\">9</div>\n    <div @click=\"makeOperation('multiply')\"\n      class=\"btn operator\"\n      :id=\"{clicked: operatorClicked}\">X</div>\n    <div @click=\"append('4')\" class=\"btn\">4</div>\n    <div @click=\"append('5')\" class=\"btn\">5</div>\n    <div @click=\"append('6')\" class=\"btn\">6</div>\n    <div @click=\"makeOperation('minus')\"\n      class=\"btn operator\"\n      :id=\"{clicked: operatorClicked}\">-</div>\n    <div @click=\"append('1')\" class=\"btn\">1</div>\n    <div @click=\"append('2')\" class=\"btn\">2</div>\n    <div @click=\"append('3')\" class=\"btn\">3</div>\n    <div @click=\"makeOperation('plus')\"\n      class=\"btn operator\"\n      :id=\"{clicked: operatorClicked}\">+</div>\n    <div @click=\"append('0')\" class=\"btn zero\">0</div>\n    <div @click=\"dot\" class=\"btn\">.</div>\n    <div @click=\"equal\" class=\"btn operator\">=</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      previous: null,\n      current: '',\n      operator: null,\n      operatorClicked: false\n    }\n  },\n  methods: {\n    append(number) {\n      if (this.operatorClicked) {\n        this.current = '';\n        this.operatorClicked = false;\n      }\n      this.current = `${this.current}${number}`;\n    },\n    clear() {\n      this.current = '';\n    },\n    sign() {\n      this.current = this.current.charAt(0) === '-' ?\n        this.current.slice(1) : `-${this.current}`;\n    },\n    dot() {\n      if (this.current.indexOf('.') === -1) {\n        this.append('.');\n      }\n    },\n    /**\n     * This function stores the previous value and set\n     * the operatorClicked as true in order to avoid\n     * the append function\n     */\n    setPrevious() {\n      if(this.previous !== null) {\n        this.equal();\n      }\n      this.previous = this.current;\n      this.operatorClicked = true;\n    },\n    /**\n     * This function handles all the operations\n     */\n    makeOperation(operation) {\n      switch (operation) {\n        case 'division':\n          this.operator = (a, b) => a / b;\n          this.setPrevious();\n          break;\n\n        case 'multiply':\n          this.operator = (a, b) => a * b;\n          this.setPrevious();\n          break;\n\n        case 'minus':\n          this.operator = (a, b) => a - b;\n          this.setPrevious();\n          break;\n\n        case 'plus':\n          this.operator = (a, b) => a + b;\n          this.setPrevious();\n          break;\n      \n        default:\n          break;\n      }\n    },\n    percentage() {\n      this.current = `${parseFloat(this.current) / 100}`;\n    },\n    equal() {\n      this.current = `${this.operator(\n        parseFloat(this.previous),\n        parseFloat(this.current)\n      )}`;\n      this.previous = null;\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n.calculator {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-auto-rows: minmax(50px, auto);\n  width: 400px;\n  margin: 0 auto;\n  font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n  text-align: center;\n  font-size: 30px;\n  cursor: pointer;\n}\n\n.display {\n  grid-column: 1 / 5;\n  color: #fff;\n  background-color: #333;\n  cursor: auto;\n}\n\n.btn {\n  background-color: #eee;\n  border: 1px solid rgba(0, 0, 0, .2);\n}\n\n.operator { background-color: orange; }\n\n.clicked { background-color: #f9c15b; }\n\n.zero {\n  grid-column: 1 / 3;\n}\n</style>\n"],"sourceRoot":"src/components"}]}